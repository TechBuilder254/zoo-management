================================================
   QUICK START GUIDE
================================================

‚úÖ FRONTEND + BACKEND SETUP COMPLETE!

All API calls are now connected:
  Frontend ‚Üí http://localhost:5000/api

================================================
   STEP 1: SETUP POSTGRESQL
================================================

Option A - If you have PostgreSQL installed:
-----------------------------------------
1. Open PostgreSQL (psql):
   psql -U postgres

2. Create database:
   CREATE DATABASE zoo_db;
   \q

Option B - Use Docker (Easiest):
-----------------------------------------
docker run --name zoo-postgres \
  -e POSTGRES_PASSWORD=postgres \
  -e POSTGRES_DB=zoo_db \
  -p 5432:5432 -d postgres:14

================================================
   STEP 2: CONFIGURE BACKEND
================================================

1. Create backend/.env file with this content:

DATABASE_URL="postgresql://postgres:postgres@localhost:5432/zoo_db?schema=public"
JWT_SECRET=super_secret_jwt_key_change_this
PORT=5000
NODE_ENV=development
FRONTEND_URL=http://localhost:3000

IMPORTANT: Change "postgres:postgres" if you used different username:password

================================================
   STEP 3: RUN MIGRATIONS
================================================

cd backend
npx prisma migrate dev --name init

This creates all tables:
  ‚úì users
  ‚úì animals
  ‚úì reviews (with AI sentiment fields!)
  ‚úì bookings
  ‚úì events
  ‚úì favorites
  ‚úì health_records
  ‚úì newsletters

================================================
   STEP 4: ADD SAMPLE DATA (Optional)
================================================

npm run prisma:seed

This creates:
  - Admin user: admin@zoo.com / admin123
  - Visitor: visitor@example.com / password123
  - 8 animals (Lion, Elephant, Giraffe, etc.)
  - Sample reviews with AI sentiment
  - Sample events

================================================
   STEP 5: START BACKEND
================================================

npm run dev

Server runs at: http://localhost:5000
Test: http://localhost:5000/health

================================================
   STEP 6: START FRONTEND
================================================

Open new terminal:

cd frontend
npm start

Frontend runs at: http://localhost:3000

================================================
   ‚úÖ EVERYTHING IS CONNECTED!
================================================

Frontend API calls ‚Üí Backend API ‚Üí PostgreSQL

What works now:
  ‚úì User registration/login
  ‚úì Browse animals (from real database)
  ‚úì Create reviews (with AI sentiment analysis)
  ‚úì Book tickets
  ‚úì Favorite animals
  ‚úì Admin features

================================================
   üìä DATABASE GUI (Optional)
================================================

View/edit database:

cd backend
npm run prisma:studio

Opens at: http://localhost:5555

================================================
   üß™ TEST THE API
================================================

Register:
curl -X POST http://localhost:5000/api/auth/register \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"test@example.com\",\"password\":\"password123\",\"name\":\"Test User\"}"

Login:
curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"test@example.com\",\"password\":\"password123\"}"

Get Animals:
curl http://localhost:5000/api/animals

================================================
   ‚ùå TROUBLESHOOTING
================================================

Error: "Can't reach database"
‚Üí Make sure PostgreSQL is running
‚Üí Check DATABASE_URL in backend/.env

Error: "Port 5000 already in use"
‚Üí Change PORT=5001 in backend/.env

Error: "Prisma Client not generated"
‚Üí Run: npm run prisma:generate

================================================
   üéâ YOU'RE DONE!
================================================

Now you have:
  ‚úì Full backend API
  ‚úì PostgreSQL database
  ‚úì AI sentiment analysis on reviews
  ‚úì Sample data ready to test
  ‚úì Frontend connected to backend

Start coding or add more AI features!

