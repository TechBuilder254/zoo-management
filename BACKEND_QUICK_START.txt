================================================
   BACKEND - QUICK START GUIDE
================================================

‚úÖ WHAT'S BEEN CREATED:
   - Complete Express + TypeScript backend
   - PostgreSQL database with Prisma ORM
   - JWT authentication
   - Full CRUD for Animals, Reviews, Bookings
   - Ready for Vercel + Supabase deployment

================================================
   SETUP (5 MINUTES)
================================================

1. INSTALL POSTGRESQL (Windows):

   Option A - Download:
   https://www.postgresql.org/download/windows/
   
   Option B - Docker (Easier):
   docker run --name zoo-postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=zoo_db -p 5432:5432 -d postgres:14

2. CREATE .ENV FILE:

   Create: backend/.env
   
   DATABASE_URL="postgresql://postgres:postgres@localhost:5432/zoo_db?schema=public"
   JWT_SECRET=your_super_secret_key_change_me
   PORT=5000
   NODE_ENV=development
   FRONTEND_URL=http://localhost:3000

3. INSTALL & RUN:

   cd backend
   npm install
   npm run prisma:generate
   npm run prisma:migrate
   npm run prisma:seed        # Optional: adds sample data
   npm run dev

4. TEST:

   Open: http://localhost:5000/health
   
   Should see: {"status":"ok","message":"Zoo API is running!"}

================================================
   SAMPLE DATA INCLUDED
================================================

After running "npm run prisma:seed":

‚úÖ Admin User:
   Email: admin@zoo.com
   Password: admin123

‚úÖ Visitor User:
   Email: visitor@example.com
   Password: password123

‚úÖ Sample Animals:
   - Leo the Lion
   - Ella the Elephant
   - Gerry the Giraffe
   - Panda the Giant Panda
   - Stripe the Tiger
   - Polar the Polar Bear
   - Polly the Penguin
   - Koko the Gorilla

‚úÖ Sample Reviews & Events

================================================
   API ENDPOINTS
================================================

BASE URL: http://localhost:5000/api

AUTH:
   POST   /auth/register       - Register new user
   POST   /auth/login          - Login
   GET    /auth/profile        - Get profile (requires token)

ANIMALS:
   GET    /animals             - Get all animals
   GET    /animals/:id         - Get animal by ID
   POST   /animals             - Create animal (admin)
   PUT    /animals/:id         - Update animal (admin)
   DELETE /animals/:id         - Delete animal (admin)
   POST   /animals/:id/favorite - Toggle favorite

REVIEWS:
   GET    /reviews/animal/:id  - Get reviews for animal
   POST   /reviews             - Create review
   GET    /reviews/admin/all   - Get all reviews (admin)
   PATCH  /reviews/:id/status  - Approve/reject (admin)

BOOKINGS:
   POST   /bookings            - Create booking
   GET    /bookings/my-bookings - Get user bookings
   GET    /bookings/admin/all  - Get all bookings (admin)

================================================
   QUICK TEST COMMANDS
================================================

# Register
curl -X POST http://localhost:5000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"password123","name":"Test User"}'

# Login
curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"password123"}'

# Get Animals
curl http://localhost:5000/api/animals

================================================
   DATABASE GUI
================================================

View/edit database visually:

   npm run prisma:studio

Opens at: http://localhost:5555

================================================
   FOLDER STRUCTURE
================================================

backend/
‚îú‚îÄ‚îÄ prisma/
‚îÇ   ‚îú‚îÄ‚îÄ schema.prisma       # Database schema
‚îÇ   ‚îî‚îÄ‚îÄ seed.ts             # Sample data
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ controllers/        # Business logic
‚îÇ   ‚îú‚îÄ‚îÄ routes/             # API routes
‚îÇ   ‚îú‚îÄ‚îÄ middleware/         # Auth, errors
‚îÇ   ‚îú‚îÄ‚îÄ config/             # Database config
‚îÇ   ‚îú‚îÄ‚îÄ utils/              # Helpers
‚îÇ   ‚îú‚îÄ‚îÄ app.ts              # Express app
‚îÇ   ‚îî‚îÄ‚îÄ server.ts           # Entry point
‚îú‚îÄ‚îÄ .env                    # Your config (create this!)
‚îú‚îÄ‚îÄ .env.example            # Example config
‚îî‚îÄ‚îÄ package.json

================================================
   MIGRATING TO SUPABASE
================================================

When ready to deploy:

1. Create Supabase project at https://supabase.com
2. Get your database URL
3. Update .env:
   DATABASE_URL="postgresql://postgres:[PASSWORD]@db.[REF].supabase.co:5432/postgres"
4. Run migrations:
   npm run prisma:migrate

That's it! Works exactly the same.

================================================
   TROUBLESHOOTING
================================================

‚ùå Can't connect to database:
   - Make sure PostgreSQL is running
   - Check DATABASE_URL in .env

‚ùå Port 5000 in use:
   - Change PORT=5001 in .env

‚ùå Prisma errors:
   npm run prisma:generate

================================================
   NEXT STEPS
================================================

1. ‚úÖ Backend is running
2. üì± Connect frontend to backend
3. ü§ñ Integrate AI features
4. üöÄ Deploy to Vercel + Supabase

================================================

For detailed docs, see: BACKEND_SETUP.md

Ready to connect the frontend!


